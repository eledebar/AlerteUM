<?php

namespace App\Http\Controllers;

use App\Models\Incident;
use App\Models\User;
use App\Models\IncidentComment;
use App\Notifications\IncidentStatutUpdated;
use App\Notifications\NouvelleIncidentCree;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;

class IncidentController extends Controller
{
    use AuthorizesRequests;

    public function index(Request $request)
    {
        $user = Auth::user();

        $query = $user->estAdmin()
            ? Incident::with(['utilisateur', 'gestionnaire'])->latest()
            : Incident::where('utilisateur_id', $user->id)->latest();

        if ($request->filled('statut')) {
            $query->where('statut', $request->statut);
        }

        if ($user->estAdmin() && $request->boolean('assigne_a_moi')) {
            $query->where('attribue_a', Auth::id());
        }

        if (!$user->estAdmin()) {
            if ($request->filled('type')) {
                $query->where('type', $request->type);
            }
            if ($request->filled('titre')) {
                $query->where(function ($q) use ($request) {
                    $q->where('titre', 'like', '%' . $request->titre . '%')
                      ->orWhere('statut', 'like', '%' . $request->titre . '%');
                });
            }
        }

        if ($request->filled('date_debut')) {
            $query->whereDate('created_at', '>=', $request->date_debut);
        }

        if ($request->filled('date_fin')) {
            $query->whereDate('created_at', '<=', $request->date_fin);
        }

        $incidents = $query->paginate(10);
        $typesDisponibles = $user->estAdmin() ? [] : Incident::distinct()->pluck('type')->filter()->values();

        return $user->estAdmin()
            ? view('admin.incidents.index', compact('incidents'))
            : view('utilisateur.incidents.index', compact('incidents', 'typesDisponibles'));
    }

    public function exportCsv(Request $request)
    {
        $user = Auth::user();
        $query = Incident::where('utilisateur_id', $user->id)->latest();

        if ($request->filled('statut')) {
            $query->where('statut', $request->statut);
        }
        if ($request->filled('type')) {
            $query->where('type', $request->type);
        }
        if ($request->filled('titre')) {
            $query->where(function ($q) use ($request) {
                $q->where('titre', 'like', '%' . $request->titre . '%')
                  ->orWhere('statut', 'like', '%' . $request->titre . '%');
            });
        }
        if ($request->filled('date_debut')) {
            $query->whereDate('created_at', '>=', $request->date_debut);
        }
        if ($request->filled('date_fin')) {
            $query->whereDate('created_at', '<=', $request->date_fin);
        }

        $incidents = $query->get();

        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => 'attachment; filename="incidents_utilisateur.csv"',
        ];

        $callback = function () use ($incidents) {
            $handle = fopen('php://output', 'w');
            fputcsv($handle, ['ID', 'Titre', 'Statut', 'Type']);
            foreach ($incidents as $incident) {
                fputcsv($handle, [
                    $incident->id,
                    $incident->titre,
                    $incident->statut,
                    $incident->type,
                ]);
            }
            fclose($handle);
        };

        return response()->stream($callback, 200, $headers);
    }

    public function create(Request $request)
{

    $categorie = $request->input('categorie');

    $types = match ($categorie) {
        'communication' => [
            'Messagerie' => "Vous rencontrez des difficultÃ©s avec la messagerie institutionnelle (problÃ¨mes d'envoi, de rÃ©ception, d'accÃ¨s ou de configuration). Veuillez prÃ©ciser le type de problÃ¨me rencontrÃ©, la plateforme utilisÃ©e (web, application, etc.) et indiquer votre adresse e-mail institutionnelle.",
            'Outils collaboratifs' => "ProblÃ¨mes liÃ©s Ã  l'utilisation d'outils collaboratifs tels que les drives partagÃ©s, calendriers ou plateformes de travail en Ã©quipe. Merci dâ€™indiquer lâ€™outil concernÃ©, la nature du problÃ¨me (accÃ¨s, partage, synchronisation...) et si dâ€™autres utilisateurs sont Ã©galement impactÃ©s.",
        ],
        'acces' => [
            'Connexion Internet' => "Connexion Internet absente, instable ou trÃ¨s lente via le rÃ©seau Wi-Fi ou filaire de lâ€™Ã©tablissement. Merci de prÃ©ciser lâ€™endroit oÃ¹ le problÃ¨me survient (bÃ¢timent, salle...), lâ€™appareil utilisÃ© et les horaires approximatifs oÃ¹ la dÃ©connexion se produit.",
            'ProblÃ¨mes de mot de passe' => "Vous ne parvenez pas Ã  accÃ©der Ã  un service en raison dâ€™un mot de passe oubliÃ©, erronÃ© ou expirÃ©. Veuillez indiquer le service concernÃ© (ENT, messagerie, plateforme...) et si vous avez dÃ©jÃ  tentÃ© de rÃ©initialiser le mot de passe. N'oubliez pas d'indiquer votre identifiant universitaire si possible.",
        ],
        'plateformes' => [
            'Formulaires en ligne' => "Vous rencontrez une erreur lors de lâ€™affichage ou de la soumission dâ€™un formulaire en ligne (champs inactifs, validation impossible, donnÃ©es perdues...). Merci dâ€™indiquer le lien du formulaire, le service concernÃ© et le moment oÃ¹ lâ€™erreur est apparue.",
            'Sites web universitaires' => "Lâ€™un des sites web universitaires est inaccessible ou certaines de ses fonctionnalitÃ©s ne rÃ©pondent pas. Veuillez indiquer lâ€™URL concernÃ©e, ce que vous essayiez de faire et le type d'appareil utilisÃ© (ordinateur, smartphone, etc.).",
        ],
        'equipements' => [
            'MatÃ©riel dÃ©fectueux' => "Un appareil (ordinateur, imprimante, projecteur...) est en panne ou ne fonctionne pas correctement. Merci dâ€™indiquer le type de matÃ©riel, son emplacement (salle, bÃ¢timent...), les symptÃ´mes du dysfonctionnement et si des tentatives de redÃ©marrage ont Ã©tÃ© faites.",
            'Logiciels manquants' => "Un logiciel nÃ©cessaire Ã  votre activitÃ© nâ€™est pas installÃ© sur votre poste. Merci dâ€™indiquer le nom exact du logiciel, son utilisation prÃ©vue et le type de poste concernÃ© (fixe, portable, usage personnel ou partagÃ©).",
            'ProblÃ¨me de licence' => "Un logiciel indique un problÃ¨me de licence (activation Ã©chouÃ©e, licence expirÃ©e ou invalide). Merci de prÃ©ciser le nom du logiciel, le message dâ€™erreur reÃ§u et lâ€™impact sur votre activitÃ© (utilisation partielle ou impossible).",
        ],
        'enseignement' => [
            'Ã‰quipements de labo' => "Un Ã©quipement prÃ©sent dans un laboratoire ou un atelier ne fonctionne pas ou nÃ©cessite une intervention technique. Merci dâ€™indiquer le nom de lâ€™appareil, son emplacement et en quoi cela empÃªche la rÃ©alisation des activitÃ©s pÃ©dagogiques.",
            'AccÃ¨s Ã  bases de donnÃ©es' => "Vous ne parvenez pas Ã  accÃ©der Ã  des bases de donnÃ©es ou des ressources scientifiques en ligne. Veuillez indiquer le nom de la ressource, la mÃ©thode dâ€™accÃ¨s utilisÃ©e (via ENT, VPN, etc.) et si le problÃ¨me est constant ou intermittent.",
        ],
        'assistance' => [
            'Demande dâ€™assistance' => "Vous souhaitez Ãªtre aidÃ©(e) pour accomplir une tÃ¢che numÃ©rique prÃ©cise (utilisation dâ€™un outil, configuration dâ€™un service, rÃ©solution dâ€™un problÃ¨me technique...). Merci de dÃ©crire votre besoin et le contexte dâ€™utilisation.",
            'Orientation numÃ©rique' => "Vous demandez un accompagnement ou une formation pour mieux utiliser les outils numÃ©riques de lâ€™Ã©tablissement. Merci dâ€™indiquer les outils concernÃ©s, votre rÃ´le dans lâ€™Ã©tablissement (Ã©tudiant, enseignant, personnel...) et vos attentes.",
            'Autres demandes' => "Votre demande ne correspond Ã  aucune des catÃ©gories prÃ©cÃ©dentes mais concerne un service ou outil numÃ©rique. Merci de dÃ©crire clairement votre situation, le besoin identifiÃ© et dâ€™indiquer vos coordonnÃ©es de contact (email, rÃ´le, etc.).",
        ],
        
        default => [],
    };

    return view('utilisateur.incidents.create', [
        'categorie' => $categorie,
        'types' => $types,
    ]);
}

    public function store(Request $request)
    {
        if (Auth::user()->estAdmin()) {
            $request->validate([
                'titre' => 'required|string',
                'description' => 'required|string',
                'utilisateur_id' => 'required|exists:users,id',
                'attribue_a' => 'nullable|exists:users,id',
            ]);

            Incident::create([
                'titre' => $request->titre,
                'description' => $request->description,
                'statut' => 'nouveau',
                'utilisateur_id' => $request->utilisateur_id,
                'attribue_a' => $request->attribue_a,
            ]);

            return redirect()->route('admin.incidents.index')->with('success', 'Incident crÃ©Ã© avec succÃ¨s.');
        }

        // Usuario normal
        $request->validate([
            'titre' => 'required|string|max:255',
            'description' => 'required|string',
            'categorie' => 'required|string',
            'type' => 'required|string',
        ]);

        $incident = Incident::create([
            'titre' => $request->titre,
            'description' => $request->description,
            'categorie' => $request->categorie,
            'type' => $request->type,
            'statut' => 'nouveau',
            'utilisateur_id' => Auth::id(),
        ]);

        // ğŸ”” Notificar a todos los administradores
        User::where('role', 'admin')->get()->each(function ($admin) use ($incident) {
            $admin->notify(new NouvelleIncidentCree($incident));
        });

        return redirect()->route('utilisateur.incidents.show', $incident)->with('success', 'Incident crÃ©Ã© avec succÃ¨s.');
    }

    public function edit(Incident $incident)
    {
        $this->authorize('update', $incident);

        if (Auth::user()->estAdmin()) {
            $incident->load(['utilisateur', 'commentaires.auteur']);
            $admins = User::where('role', 'admin')->get();
            return view('admin.incidents.edit', compact('incident', 'admins'));
        }

        if ($incident->statut !== 'nouveau') {
            return redirect()->route('utilisateur.incidents.index')->with('error', 'Impossible de modifier un incident dÃ©jÃ  traitÃ©.');
        }

        return view('utilisateur.incidents.edit', compact('incident'));
    }

    public function update(Request $request, Incident $incident)
    {
        $this->authorize('update', $incident);

        if (Auth::user()->estAdmin()) {
            $request->validate([
                'statut' => 'required|in:nouveau,en_cours,rÃ©solu',
                'commentaire' => 'nullable|string',
                'attribue_a' => 'nullable|exists:users,id',
            ]);

            $ancienStatut = $incident->statut;

            $incident->update([
                'statut' => $request->statut,
                'attribue_a' => $request->attribue_a,
            ]);

            if ($incident->utilisateur && $ancienStatut !== $incident->statut) {
                $incident->utilisateur->notify(new IncidentStatutUpdated($incident));
            }

            if ($request->filled('commentaire')) {
                IncidentComment::create([
                    'incident_id' => $incident->id,
                    'user_id' => Auth::id(),
                    'commentaire' => $request->commentaire,
                ]);
            }

            return redirect()->route('admin.incidents.index')->with('success', 'Incident mis Ã  jour avec succÃ¨s.');
        }

        if ($incident->statut !== 'nouveau') {
            return redirect()->route('utilisateur.incidents.index')->with('error', 'Impossible de mettre Ã  jour un incident dÃ©jÃ  traitÃ©.');
        }

        $request->validate([
            'titre' => 'required|string',
            'description' => 'required|string',
        ]);

        $incident->update([
            'titre' => $request->titre,
            'description' => $request->description,
        ]);

        return redirect()->route('utilisateur.incidents.index')->with('success', 'Incident mis Ã  jour avec succÃ¨s.');
    }

    public function destroy(Incident $incident)
    {
        $this->authorize('delete', $incident);

        if ($incident->statut !== 'nouveau') {
            return redirect()->back()->with('error', 'Impossible de supprimer un incident dÃ©jÃ  traitÃ©.');
        }

        $incident->delete();

        $route = Auth::user()->estAdmin() ? 'admin.incidents.index' : 'utilisateur.incidents.index';

        return redirect()->route($route)->with('success', 'Incident supprimÃ© avec succÃ¨s.');
    }

    public function show(Incident $incident)
    {
        $user = Auth::user();

        if (!$user->estAdmin() && $incident->utilisateur_id !== $user->id) {
            abort(403, 'AccÃ¨s non autorisÃ©.');
        }

        $incident->load(['utilisateur', 'gestionnaire', 'commentaires.auteur']);

        return $user->estAdmin()
            ? view('admin.incidents.show', compact('incident'))
            : view('utilisateur.incidents.show', compact('incident'));
    }
}
